#+TITLE: VM
#+AUTHOR: ciglesia

* TODOS
** TODO [#A] find out [0%]
- [ ] Describe segments of the execution view for the file format section.
* REFERENCE
** Object file format (ELF, Executable and Linking Format)
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------|
| *relocatable file*  | holds code and data suitable for *linking* with other object files to create an *executable* or a *shared object* file                                 |
| - *executable file* | holds a program suitable for *execution* (specifies how exec(BA_OS) creates a program's *process image*)                                               |
| - *shared object*   | holds code and data suitable for *linking* in two contexts:                                                                                            |
|                     | -          link editor (ld(BA_OS)) processes the *shared object* file with other *relocatable and shared object files* to create another *object file* |
|                     | -          the dynamic linker combines it with an *executable file* and other *shared objects* to create a *process image*                             |
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------|
Created by the assembler and link editor, *object files are binary representations of programs* intended to be executed directly on a processor.
    (Programs that require other abstract machines, such as shell scripts, are excluded)
*** File format
Object files participate in program *linking* (*building* a program) and program *execution* (*running* a program).

- *ELF HEADER*
  - *road map* describing the file's organization
- *Sections*
  - hold the bulk of object file information for the *linking view*:
	* Instructions
	* Data
	* *symbol table* _____________________________________________________________
	* relocation information
	* ...
- *Segments*
  - TODO
- *Header table*
  - tells the system how to create a process image and *describe the file's sections*
	* Files used to build a process image (execute a program) *must have a program header table*
	* Relocatable files do not need one
	* Every section has an entry in the table
	* each entry gives information such as the section name, the section size, and so on
	* Files used during linking must have a section header table; other object files may or may not have one

**Although the figure shows the program header table immediately after the ELF header, and the section header table following the sections, actual files may differ. Moreover, sections and segments have no specified order. Only the ELF header has a fixed position in the file.**

**** Linking view
|-----------------------------------|
| *ELF HEADER*                      |
|-----------------------------------|
| Program header table (*optional*) |
|-----------------------------------|
| *section 1*                       |
| ...                               |
| *section n*                       |
| ...                               |
|-----------------------------------|
| Section header table (*required*) |
|-----------------------------------|

**** Execution view
|-----------------------------------|
| *ELF HEADER*                      |
|-----------------------------------|
| Program header table (*required*) |
|-----------------------------------|
| *segment 1*                       |
| *segment 2*                       |
| *section 3*                       |
| ...                               |
|-----------------------------------|
| Section header table (*optional*) |
|-----------------------------------|

** nm symbols

<symbol Value, in the rardix HEX> <Symbol Type> <Symbol Name>

|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| type | condition                      | description                                                                                     | Local or Global |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| A    | st_shndx == ABS                | The symbolâ€™s value is *absolute*, and will not be changed by further linking.                   | G               |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| B/b  | .bss                           | The symbol is in the *uninitialized* data section (known as BSS).                               | B:G b:L         |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
|      |                                | The symbol is *common*.  Common symbols are *uninitialized data*.  When linking, multiple       |                 |
| C    | st_shndx == COMMON             | common symbols may appear with the same name.  If the symbol is defined anywhere, the           | G               |
|      |                                | common symbols are treated as undefined references.                                             |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| D/d  | .data .dynamic                 | The symbol is in the *initialized data section*.                                                | D:G d:L         |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
|      |                                | The symbol is in an *initialized data section* for small objects.  Some object file formats     |                 |
| G/g  |                                | permit more efficient access to small data objects, such as a global int variable as opposed    | G:G g:L         |
|      |                                | to a large global array.                                                                        |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
|      |                                | For ELF format files this indicates that the symbol is an *indirect function*.  This is a GNU   |                 |
| i    |                                | extension to the standard set of ELF symbol types. It indicates a symbol which if referenced    | L               |
|      |                                | by a relocation *does not evaluate to its address, but instead must be invoked at runtime*.     |                 |
|      |                                | The runtime execution will then return the value to be used in the *relocation*.                |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| I    |                                | The symbol is an *indirect reference to another symbol*. This is a GNU extension to the a.out   | G               |
|      |                                | object file format which is rarely used.                                                        |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| N    |                                | The symbol is a *debugging symbol*.                                                             | G               |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| p    |                                | The symbols is in a *stack unwind section*.                                                     | L               |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| R/r  | .rodata                        | The symbol is in a *read only data section*.                                                    | R:G r:L         |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| S/s  |                                | The symbol is in an *uninitialized data section for small objects*.                             | S:G s:L         |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| T/t  | .text                          | The symbol is in the *text* (code) section.                                                     | T:G t:L         |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| U    | st_ndx == UNDEF                | *UNDEFINED*                                                                                     | G               |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| u    | bind == GNU_UNIQUE             | This is a GNU extension to the standard set of ELF symbol bindings.                             | *GGGGGGG*       |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| V/v  | bind == WEAK && type == OBJECT | The symbol is a *weak object*.                                                                  | *GGGGGGG*       |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| W/w  | bind == WEAK                   | The symbol is a *weak symbol* that has *not been specifically tagged as a weak object symbol*.  | *GGGGGGG*       |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| -    |                                | The symbol is a stabs symbol in an a.out object file. In this case, the next values printed     |                 |
|      |                                | are the stabs other field, the stabs desc field, and the stab type. (stab symb hold debug info) |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|
| ?    |                                | The symbol type is unknown, or object file format specific.                                                                                              |                 |
|------+--------------------------------+-------------------------------------------------------------------------------------------------+-----------------|


** Useful cmds
- xxd -l 64 <obj>
- hexdump -Cv <obj>
